let images = Array.from({ length: 16 }, (_, i) => i + 1);
let currentIndex = 0;

function shuffleImages() {
    for (let i = images.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [images[i], images[j]] = [images[j], images[i]];
    }
}

function changeBackgroundImage() {
    if (currentIndex >= images.length) {
        shuffleImages();
        currentIndex = 0;
    }

    const leftInfo = document.querySelector('.left-info');
    leftInfo.style.opacity = 0;

    setTimeout(() => {
        leftInfo.style.backgroundImage = `url('images/${images[currentIndex]}.png')`;
        leftInfo.style.backgroundSize = 'cover';
        leftInfo.style.backgroundPosition = 'center';
        leftInfo.style.opacity = 1;
        currentIndex++;
    }, 500);
}

document.addEventListener("DOMContentLoaded", () => {
    shuffleImages();
    document.querySelector('.left-info').style.transition = "opacity 0.5s ease-in-out";
});

setInterval(changeBackgroundImage, 10000);
changeBackgroundImage();




const apiKey = 'YOUR_API_KEY';
const locButton = document.querySelector('.loc-button');
const todayInfo = document.querySelector('.today-info');
const todayWeatherIcon = document.querySelector('.today-weather i');
const todayTemp = document.querySelector('.weather-temp');
const daysList = document.querySelector('.days-list');

const weatherIconMap = {
    '01d': 'sun',
    '01n': 'moon',
    '02d': 'sun',
    '02n': 'moon',
    '03d': 'cloud',
    '03n': 'cloud',
    '04d': 'cloud',
    '04n': 'cloud',
    '09d': 'cloud-rain',
    '09n': 'cloud-rain',
    '10d': 'cloud-rain',
    '10n': 'cloud-rain',
    '11d': 'cloud-lightning',
    '11n': 'cloud-lightning',
    '13d': 'cloud-snow',
    '13n': 'cloud-snow',
    '50d': 'water',
    '50n': 'water'
};

const translateWeatherDescription = (description) => {
    const translations = {
        'clear sky': 'céu limpo',
        'few clouds': 'algumas nuvens',
        'scattered clouds': 'nuvens dispersas',
        'broken clouds': 'nuvens quebradas',
        'shower rain': 'chuva rápida',
        'rain': 'chuva',
        'thunderstorm': 'tempestade',
        'snow': 'neve',
        'mist': 'neblina',
        'smoke': 'fumaça',
        'haze': 'névoa',
        'dust': 'poeira',
        'fog': 'nevoeiro',
        'sand': 'areia',
        'ash': 'cinza'
    };

    return translations[description] || description;
};

function fetchWeatherData(location) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${location}&appid=${apiKey}&units=metric`;

    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            const todayWeather = data.list[0].weather[0].description;
            const todayTemperature = `${Math.round(data.list[0].main.temp)}°C`;
            const todayWeatherIconCode = data.list[0].weather[0].icon;

            todayInfo.querySelector('h2').textContent = new Date().toLocaleDateString('pt-BR', { weekday: 'long' });
            todayInfo.querySelector('span').textContent = new Date().toLocaleDateString('pt-BR', { day: 'numeric', month: 'long', year: 'numeric' });
            todayWeatherIcon.className = `bx bx-${weatherIconMap[todayWeatherIconCode]}`;
            todayTemp.textContent = todayTemperature;

            const locationElement = document.querySelector('.today-info > div > span');
            locationElement.textContent = `${data.city.name}, ${data.city.country}`;

            const weatherDescriptionElement = document.querySelector('.today-weather > h3');
            weatherDescriptionElement.textContent = translateWeatherDescription(todayWeather);

            const todayPrecipitation = `${Math.round(data.list[0].pop * 100)}%`;
            const todayHumidity = `${data.list[0].main.humidity}%`;
            const todayWindSpeed = `${data.list[0].wind.speed} km/h`;

            const dayInfoContainer = document.querySelector('.day-info');
            dayInfoContainer.innerHTML = `
                <div>
                    <span class="title">PRECIPITAÇÃO</span>
                    <span class="value">${todayPrecipitation}</span>
                </div>
                <div>
                    <span class="title">UMIDADE</span>
                    <span class="value">${todayHumidity}</span>
                </div>
                <div>
                    <span class="title">VELOCIDADE DO VENTO</span>
                    <span class="value">${todayWindSpeed}</span>
                </div>
            `;

            updateWeatherForNextDays(data);
        })
        .catch(error => {
            alert(`Erro ao buscar dados climáticos: ${error} (Erro na API)`);
        });
}

function updateWeatherForNextDays(data) {
    const nextDaysData = data.list;
    const maxDays = 7;
    const dailyForecasts = {};

    // Mapeia previsões únicas por dia convertendo a chave para lowercase
    nextDaysData.forEach((dayData) => {
        const forecastDate = new Date(dayData.dt_txt);
        const dayKey = forecastDate.toLocaleDateString('pt-BR', { weekday: 'long' }).toLowerCase();
        if (!dailyForecasts[dayKey]) {
            dailyForecasts[dayKey] = dayData;
        }
    });

    // Ordem correta dos dias da semana (todos em minúsculas)
    const weekDaysOrder = ['domingo', 'segunda-feira', 'terça-feira', 'quarta-feira', 'quinta-feira', 'sexta-feira', 'sábado'];

    // Constrói a lista de previsões respeitando a ordem semanal
    daysList.innerHTML = '';
    let count = 0;

    weekDaysOrder.forEach((weekDay) => {
        if (dailyForecasts[weekDay] && count < maxDays) {
            const dayData = dailyForecasts[weekDay];
            const forecastDate = new Date(dayData.dt_txt);
            let dayAbbreviation = forecastDate.toLocaleDateString('pt-BR', { weekday: 'short' });
            dayAbbreviation = dayAbbreviation.replace('.', ''); // Remove pontos, se houver

            const dayTemp = `${Math.round(dayData.main.temp)}°C`;
            const iconCode = dayData.weather[0].icon;

            daysList.innerHTML += `
                <li>
                    <i class='bx bx-${weatherIconMap[iconCode]}'></i>
                    <span>${dayAbbreviation}</span>
                    <span class="day-temp">${dayTemp}</span>
                </li>
            `;
            count++;
        }
    });
}

function fetchWeatherByLocation() {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(position => {
            const lat = position.coords.latitude;
            const lon = position.coords.longitude;

            const geoApiUrl = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;

            fetch(geoApiUrl)
                .then(response => response.json())
                .then(data => {
                    fetchWeatherData(data.city.name);
                })
                .catch(error => {
                    alert(`Erro ao buscar dados climáticos: ${error} (Erro de Geolocalização)`);
                });
        }, error => {
            alert('Acesso à geolocalização negado ou falhou');
        });
    } else {
        alert('A geolocalização não é suportada pelo seu navegador');
    }
}

document.addEventListener('DOMContentLoaded', fetchWeatherByLocation);
locButton.addEventListener('click', fetchWeatherByLocation);
